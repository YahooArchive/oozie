<noautolink>

[[index][::Go back to Oozie Documentation Index::]]

---+!! Oozie Installation and Configuration

%TOC%

---++ Basic Setup

Follow the instructions at [[DG_QuickStart][Oozie Quick Start]].

---++ Environment Setup

The =OOZIE_HOME= environment variable is used to determine Oozie =conf/= and =logs/= directories. If not set the
parent's parent directory of the =oozie-start.sh= command will be used.

The =OOZIE_HTTP_PORT= environment variable specifies the port Oozie server runs on. If not set, the default value
is =11000=.

The =OOZIE_HTTP_HOSTNAME= environment variable specifies the host name Oozie server runs on. If not set, the default
value is =`hostname -f`.

The =OOZIE_BASE_URL= environment variable specifies Oozie base URL for callback URLs. If not set, the default value
is =http://${OOZIE_HTTP_HOSTNAME}:${OOZIE_HTTP_PORT}/oozie=.

---++ Oozie Server Setup

Oozie is bundled without Hadoop JAR files and without the ExtJS library.

   * The Hadoop JARs are required to run Oozie
   * The ExtJS library is optional (only required for the Oozie web-console to work)

The =addtowar.sh= script or the convenience =oozie-setup.sh= script must be used to prepare an Oozie server.

These scripts add Hadoop JARs, JDBC JARs and the ExtJS library to the Oozie WAR file.

The =addtowar.sh= script options are:

<verbatim>
 Usage  : addtowar <OPTIONS>
 Options: -inputwar INPUT_OOZIE_WAR
          -outputwar OUTPUT_OOZIE_WAR
          [-hadoop HADOOP_VERSION HADOOP_PATH]
          [-extjs EXTJS_PATH]
          [-jars JARS_PATH] (multiple JAR path separated by ':')
</verbatim>

The =setup-oozie.sh= script options are:

<verbatim>
Usage  : oozie-setup.sh <OPTIONS>"
         [-extjs EXTJS_PATH] (expanded or ZIP, to enable the Oozie webconsole)"
         [-hadoop HADOOP_VERSION HADOOP_PATH] (Hadoop version [0.20.1|0.20.2|0.20.104|0.20.200]"
                                               and Hadoop install dir)"
         [-jars JARS_PATH] (multiple JAR path separated by ':')"
         (without options does default setup, without the Oozie webconsole)"
</verbatim>

NOTE: The =setup-oozie.sh= script prepares the embedded Tomcat server to run Oozie. The =addtowar.sh= script should
be used only if an alternate servlet container is used.

---+++ Setting Up Oozie with an Alternate Tomcat

The original Oozie WAR file is at =${OOZIE_HOME}/oozie.war=.

After the Hadoop JARs and the ExtJS library has been added to the =oozie.war= file Oozie is ready for deployment.

If present, delete any previous =oozie.war= and =oozie= directory from Tomcat's =webapps/= directory.

Copy the =oozie.war= file (the one that contains the Hadoop JARs adn the ExtJS library) to Tomcat's =webapps/=
directory.

*IMPORTANT:* Only one Oozie instance can be deployed per Tomcat instance.

---++ Database Setup

Oozie works with HSQL, MySQL and Oracle databases.

If using HSQL, Oozie bundles HSQL JDBC driver. HSQL is an embedded in-memory database, all data is lost when Oozie
is restarted.

If using MySQL or Oracle, the corresponding JDBC driver JARs files must be in Oozie classpath (added to Oozie WAR or
in Tomcat's =common/lib= directory). A database should be created for Oozie, Oozie creates its tables automatically.

The =oozie-setup.sh= and the=addtowar.sh= scripts have an option =-jars= that can be used to add the Oracle or MySQL
JDBC driver JARs to the Oozie WAR file.

---++ Oozie Configuration

Oozie configuration is always read from the =${OOZIE_HOME}/conf= directory.

The Oozie configuration is distributed in 3 different files:

   * =oozie-site.xml= : Oozie server configuration
   * =oozie-log4j.properties= : Oozie logging configuration
   * =adminusers.txt= : Oozie admin users list

---+++ Oozie Configuration Properties

All Oozie configuration properties and their default values are defined in the =oozie-default.xml= file.

Oozie resolves configuration property values in the following order:

   * If a Java System property is defined, it uses its value
   * Else, if the Oozie configuration file (=oozie-site.xml=) contains the property, it uses its value
   * Else, it uses the default value documented in the =oozie-default.xml= file

Oozie configuration is loaded from the directory specified in the  =OOZIE_CONFIG_DIR= environment variable.

If the =OOZIE_CONFIG_DIR= environment variable is not defined, Oozie configuration is loaded from the
 =${OOZIE_HOME}/conf/= directory.

The =OOZIE_CONFIG_FILE= environment variable can be set to indicate an alternate Oozie configuration file than
the =oozie-site.xml= file. The alternate file must be in the configuration directory.

*NOTE:* The =oozie-default.xml= file found in the =${OOZIE_HOME}/conf/= directory is not used by Oozie, it is there
for reference purposes only.

---+++ Logging Configuration

By default Oozie logs to the =${OOZIE_HOME}/logs/= directory in 4 different files:

   * oozie.log: web services log streaming works from this log
   * oozie-ops.log: messages for Admin/Operations to monitor
   * oozie-instrumentation.log: intrumentation data, every 60 seconds (configurable)
   * oozie-audit.log: audit messages, workflow jobs changes

Oozie log configuration is defined in the =oozie-log4j.properties= files.

If the Oozie log configuration file changes, Oozie reloads the new settings dynamically.

The =OOZIE_LOG4J_FILE= environment variable can be set to indicate an alternate Oozie logging configuration file. The
alternate file must be in the =${OOZIE_HOME}/conf/= directory.

The =OOZIE_LOG4J_RELOAD= environment variable can be set to specify the logging configuration reload interval in
seconds. The default value is 10 seconds.

---+++ Oozie Authentication Configuration

Oozie can work with Hadoop 20 with Security distribution which supports Kerberos authentication.

Oozie authentication is configured using the following configuration properties (default values shown):

<verbatim>
  oozie.service.HadoopAccessorService.kerberos.enabled=false
  local.realm=LOCALHOST
  oozie.service.HadoopAccessorService.keytab.file=${user.home}/oozie.keytab
  oozie.service.HadoopAccessorService.kerberos.principal=${user.name}/localhost@{local.realm}
</verbatim>

The above default values are for a Hadoop 0.20 secure distribution (with support for Kerberos authentication).

To use a Hadoop 20 distribution pre-security (i.e. 0.20.1) the following property must be set:

<verbatim>
  oozie.services.ext=org.apache.oozie.service.HadoopAccessorService
</verbatim>

To enable Kerberos authentication, the following property must be set:

<verbatim>
  oozie.service.HadoopAccessorService.kerberos.enabled=true
</verbatim>

When using Kerberos authentication, the following properties must be set to the correct values (default values shown):

<verbatim>
  local.realm=LOCALHOST
  oozie.service.HadoopAccessorService.keytab.file=${user.home}/oozie.keytab
  oozie.service.HadoopAccessorService.kerberos.principal=${user.name}/localhost@{local.realm}
</verbatim>

*IMPORTANT:* When using Oozie with a Hadoop 20 with Security distribution, the Oozie user in Hadoop must be configured
as a proxy user.

---+++ User Authorization Configuration

Oozie has a basic authorization model:

   * Users have read access to all jobs
   * Users have write access to their own jobs
   * Users have write access to jobs for groups the users belong to
   * Users have read access to admin operations
   * Admin users have write access to all jobs
   * Admin users have write access to admin operations

If security is disabled all users are admin users.

Oozie security is set via the following configuration property (default value shown):

<verbatim>
  oozie.service.AuthorizationService.security.enabled=false
</verbatim>

If security is enabled, the admin users are read from the =${OOZIE_HOME}/conf/adminusers.txt= file:

   * One user name per line
   * Empty lines and lines starting with '#' are ignored

---+++ Database Configuration

The SQL database used by Oozie is configured using the following configuration properties (default values shown):

<verbatim>
  oozie.db.schema.name=oozie
  oozie.db.schema.create=true
  oozie.service.StoreService.jdbc.driver=org.hsqldb.jdbcDriver
  oozie.service.StoreService.jdbc.url=jdbc:hsqldb:mem:${oozie.db.schema.name}
  oozie.service.StoreService.jdbc.username=sa
  oozie.service.StoreService.jdbc.password=
  oozie.service.StoreService.pool.max.active.conn=10
</verbatim>

The default values are for HSQLDB, an embedded in-memory database bundled with Oozie.

To use MySQL or Oracle the corresponding JDBC driver JAR must be in the classpath (or added to the Oozie WAR file).

*NOTE:* If the =oozie.db.schema.create= property is set to =true= (default) the Oozie tables will be created
automatically if they are not found in the database at Oozie start up time. In a production system this option should
be set to =false= once the databaset tables have been created.

---+++ Oozie System ID Configuration

Oozie has a system ID that is is used to generate the Oozie temporary runtime directory, the workflow job IDs, and the
workflow action IDs.

Two Oozie systems running with the same ID will not have any conflict but in case of troubleshooting it will be easier
to identify resources created/used by the different Oozie systems if they have different system IDs (default value
shown):

<verbatim>
  oozie.system.id=oozie-${user.name}
</verbatim>

---+++ Fine Tuning an Oozie Server

Refer to the [[./oozie-default.xml][oozie-default.xml]] for details.

---++ Starting and Stopping Oozie

Use the standard Tomcat commands to start and stop Oozie.

---++ Oozie Command Line Installation

Copy and expand the =oozie-client= TAR.GZ file bundled with the distribution. Add the =bin/= directory to the =PATH=.

Refer to the [[DG_CommandLineTool][Command Line Interface Utilities]] document for a a full reference of the =oozie=
command line tool.

---++ Oozie Share Lib

The Oozie share lib TAR.GZ file bundled with the distribution contains the necessary files to run Oozie map-reduce
streaming and pig actions.

The bundled Streaming and Pig JARs are the ones used by Oozie testcases.

[[index][::Go back to Oozie Documentation Index::]]

</noautolink>
